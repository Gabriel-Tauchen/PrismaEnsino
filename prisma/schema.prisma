// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Artefato{
  nome String @id
  objeto String
  material String
  destruido Boolean
  nomeSer String
  ser Ser @relation(fields: [nomeSer], references: [nome])
  artefatos ArtefatoPoder[]
}
enum TipoSer {
  SER
  MORTAL
  DIVINDADE
}

model Ser{
  nome String @id
  sexo String
  morto Boolean
  artefatos Artefato[]
  tipo TipoSer
  divindade Divindade? @relation("serDivindade")
  mortal Mortal? @relation("serMortal")

}
model Divindade {
  nomeSer String @id
  ser Ser @relation("serDivindade", fields:[nomeSer], references: [nome])
  fraqueza String
  designacao String
  restituirVita Boolean
}
model Mortal {
  nomeSer String @id
  ser Ser @relation("serMortal", fields:[nomeSer], references: [nome])
  nascimento DateTime
  raca String
  profissao String
}

model Poder {
  idPoder Int @id @default(autoincrement())
  nome String @unique
  descricao String
  artefatos ArtefatoPoder[]
}
model ArtefatoPoder{
  artefatoNome String
  artefato Artefato @relation(fields: [artefatoNome], references: [nome])
  poderId Int
  poder Poder @relation(fields: [poderId], references: [idPoder])
  @@id([artefatoNome, poderId]) // PK composta
  @@map("ArtefatoPoder") // nome da tabela no ban
}
